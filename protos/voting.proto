syntax = "proto3";

package voting;

service VotingService {
  rpc CreateVote(CreateVoteRequest) returns (CreateVoteResponse);
  rpc SubmitVote(SubmitVoteRequest) returns (SubmitVoteResponse);
  rpc GetVoteResults(GetVoteResultsRequest) returns (GetVoteResultsResponse);
  rpc EndVote(EndVoteRequest) returns (EndVoteResponse);
  rpc GetActiveVote(GetActiveVoteRequest) returns (GetActiveVoteResponse);
}

message VoteOption {
  string id = 1;
  string text = 2;
  int32 count = 3;
}

message VoteSession {
  string id = 1;
  string room_id = 2;
  string question = 3;
  repeated VoteOption options = 4;
  string creator_id = 5;
  string created_at = 6;
  bool is_active = 7;
  repeated string voters = 8; // List of user IDs who voted
}

// CreateVote
message CreateVoteRequest {
  string room_id = 1;
  string question = 2;
  repeated string option_texts = 3;
  string creator_id = 4;
}

message CreateVoteResponse {
  bool success = 1;
  VoteSession vote_session = 2;
  optional string error = 3;
}

// SubmitVote
message SubmitVoteRequest {
  string room_id = 1;
  string vote_id = 2;
  string option_id = 3;
  string voter_id = 4;
}

message SubmitVoteResponse {
  bool success = 1;
  VoteSession updated_session = 2;
  optional string error = 3;
}

// GetVoteResults
message GetVoteResultsRequest {
  string room_id = 1;
  string vote_id = 2;
}

message GetVoteResultsResponse {
  bool success = 1;
  VoteSession vote_session = 2;
}

// EndVote
message EndVoteRequest {
  string room_id = 1;
  string vote_id = 2;
  string creator_id = 3;
}

message EndVoteResponse {
  bool success = 1;
  VoteSession final_session = 2;
}

// GetActiveVote
message GetActiveVoteRequest {
  string room_id = 1;
}

message GetActiveVoteResponse {
  bool success = 1;
  optional VoteSession active_vote = 2;
}