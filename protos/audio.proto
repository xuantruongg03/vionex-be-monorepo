syntax = "proto3";

package audio;

service AudioService {
  // Translation Cabin methods for B1-B4 flow
  rpc AllocateTranslationPort (PortRequest) returns (PortReply);

  // Establish a plain RTP connection for audio streaming
  rpc CreateTranslationProduce (CreateTranslationCabinRequest) returns (CreateTranslationCabinResponse);
  
  // Main audio buffer processing for transcription
  rpc ProcessAudioBuffer (ProcessAudioBufferRequest) returns (ProcessAudioBufferResponse);
  
  // Legacy audio chunk processing
  // This is for compatibility with existing clients that send audio in chunks
  rpc ProcessAudioChunk (ProcessAudioRequest) returns (ProcessAudioResponse);
  
  // Service statistics
  rpc GetServiceStats (Empty) returns (ServiceStatsResponse);

  // Destroy cabin
  rpc DestroyCabin (DestroyCabinRequest) returns (DestroyCabinResponse);
}

/**
 * PortRequest message for translation port allocation.
 * Contains room ID and user ID for the target user.
 */
message PortRequest {
  string roomId = 1;
  string userId = 2; // Target user ID for translation
}

/**
 * PortReply message for translation port allocation.
 * Contains success status, allocated ports for bidirectional communication, and readiness status.
 */
message PortReply {
  bool success = 1;
  int32 port = 2;      // RTP port allocated for receiving audio from SFU
  int32 send_port = 3; // RTP port allocated for sending translated audio back to SFU
  bool ready = 4;
  uint32 ssrc = 5;    // SSRC for the producer in the translation cabin
}

/**
 * Empty message for requests that do not require parameters.
 * Used for service statistics and other simple requests.
 */
message Empty {
  bool success = 1;
}

/**
 * CreateTranslationCabinRequest message for creating a translation cabin.
 * Contains room ID, user ID, source language, and target language.
 */
message ProcessAudioBufferRequest {
  string userId = 1;
  string roomId = 2;
  int64 timestamp = 3;
  bytes buffer = 4;
  double duration = 5;
  int32 sampleRate = 6;
  int32 channels = 7;
  optional string organizationId = 8; // Organization ID for multi-tenant isolation
}

/**
 * ProcessAudioBufferResponse message for the result of audio buffer processing.
 * Contains success status, transcript, confidence score, and additional message.
 */
message ProcessAudioBufferResponse {
  bool success = 1;
  string transcript = 2;
  double confidence = 3;
  string message = 4;
}

/**
 * ProcessAudioRequest message for processing audio chunks.
 * Contains room ID, user ID, timestamp, audio buffer, and duration.
 */
message ProcessAudioRequest {
  string roomId = 1;
  string userId = 2;
  int64 timestamp = 3;
  bytes audioBuffer = 4;
  double duration = 5;
}

/**
 * ProcessAudioResponse message for the result of audio chunk processing.
 * Contains success status and additional message.
 */
message ProcessAudioResponse {
  bool success = 1;
  string message = 2;
}

message ServiceStatsResponse {
  bool success = 1;
  string message = 2;
  int32 totalProcessed = 3;
  int32 successful = 4;
  int32 failed = 5;
  int32 tooShort = 6;
  int32 noSpeech = 7;
  double successRate = 8;
  bool modelLoaded = 9;
}

message CreateTranslationCabinRequest {
  string roomId = 1;
  string userId = 2;
  string sourceLanguage = 3;
  string targetLanguage = 4;
}

/**
 * CreateTranslationCabinResponse message for the result of creating a translation cabin.
 * Contains success status, message, and stream ID for client to consume translated audio.
 */
message CreateTranslationCabinResponse {
  bool success = 1;
  string message = 2;
  string streamId = 3; // StreamId for client to consume translated audio
}

message DestroyCabinRequest {
  string room_id = 1;
  string target_user_id = 2;
  string source_language = 3;
  string target_language = 4;
}

message DestroyCabinResponse {
  bool success = 1;
  string message = 2;
}