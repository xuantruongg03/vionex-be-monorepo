syntax = "proto3";

package sfu;

service SfuService {
  rpc CreateMediaRoom(CreateMediaRoomRequest) returns (CreateMediaRoomResponse);
  rpc GetStreams(GetStreamsRequest) returns (GetStreamsResponse);
  rpc ConnectTransport(ConnectTransportRequest) returns (ConnectTransportResponse);
  rpc RemoveUserMedia(RemoveUserMediaRequest) returns (RemoveUserMediaResponse);
  rpc CreateTransport(CreateTransportRequest) returns (CreateTransportResponse);
  rpc SaveStream(SaveStreamRequest) returns (SaveStreamResponse);
  rpc GetStreamById(GetStreamByIdRequest) returns (GetStreamByIdResponse);
  rpc RemoveStream(RemoveStreamRequest) returns (RemoveStreamResponse);
  rpc SaveProducerToStream(SaveProducerToStreamRequest) returns (SaveProducerToStreamResponse);
  rpc GetStreamByProducer(GetStreamByProducerRequest) returns (GetStreamByProducerResponse);
  rpc RemoveProducer(RemoveProducerRequest) returns (RemoveProducerResponse);
  rpc CreateConsumer(CreateConsumerRequest) returns (CreateConsumerResponse);
  rpc GetMediaRouter(GetMediaRouterRequest) returns (GetMediaRouterResponse);
  rpc ResumeConsumer(ResumeConsumerRequest) returns (ResumeConsumerResponse);
  rpc UnpublishStream(UnpublishStreamRequest) returns (UnpublishStreamResponse);
  rpc UpdateStream(UpdateStreamRequest) returns (UpdateStreamResponse);
  rpc RemoveParticipantMedia(RemoveParticipantMediaRequest) returns (RemoveParticipantMediaResponse);
  rpc CloseMediaRoom(CloseMediaRoomRequest) returns (CloseMediaRoomResponse);
  rpc CreateProducer(CreateProducerRequest) returns (CreateProducerResponse);
  rpc PinUser(PinUserRequest) returns (PinUserResponse);
  rpc UnpinUser(UnpinUserRequest) returns (UnpinUserResponse);
  rpc HandleSpeaking(HandleSpeakingRequest) returns (HandleSpeakingResponse);
  rpc HandleStopSpeaking(HandleStopSpeakingRequest) returns (HandleStopSpeakingResponse);
  
  // Translation Cabin Methods
  rpc AllocatePort(AllocatePortRequest) returns (AllocatePortResponse);
  rpc DestroyTranslationCabin(DestroyTranslationCabinRequest) returns (DestroyTranslationCabinResponse);
  rpc ListTranslationCabin(ListTranslationCabinRequest) returns (ListTranslationCabinResponse);
}

// Allocate Port Request/Response
message AllocatePortRequest {
  string room_id = 1;
  string source_user_id = 2;
  string target_user_id = 3;
  string source_language = 4;
  string target_language = 5;
  int32 audio_port = 6;
  int32 send_port = 7; // Port for sending audio from audio service
  uint32 ssrc = 8; // SSRC from Audio Service for producer
}

message AllocatePortResponse {
  bool success = 1;
  optional string stream_id = 2; // StreamId of translated audio stream
  optional string message = 3; // Optional message for additional info
}

message PinUserRequest {
  string room_id = 1;
  string pinner_peer_id = 2;
  string pinned_peer_id = 3;
  string transport_id = 4;
  string rtp_capabilities = 5;
}

message PinUserResponse {
  string status = 1;
  string pin_data = 2;
}

// Unpin User Request/Response
message UnpinUserRequest {
  string room_id = 1;
  string unpinner_peer_id = 2;
  string unpinned_peer_id = 3;
}

message UnpinUserResponse {
  string status = 1;
  string unpin_data = 2;
}
// Stream definition
message Stream {
  string stream_id = 1;
  string publisher_id = 2;
  string producer_id = 3;
  string metadata = 4; // JSON string
  string rtp_parameters = 5; // JSON string
  string room_id = 6;
}

// CreateMediaRoom messages
message CreateMediaRoomRequest {
  string room_id = 1;
}

message CreateMediaRoomResponse {
  string status = 1;
  optional string data = 2; // JSON string containing router data
}

// GetStreams messages
message GetStreamsRequest {
  string room_id = 1;
}

message GetStreamsResponse {
  string status = 1;
  repeated Stream streams = 2;
}

// ConnectTransport messages
message ConnectTransportRequest {
  string transport_id = 1;
  string dtls_parameters = 2; // JSON string
  string participant_data = 3; // JSON string
}

message ConnectTransportResponse {
  bool success = 1;
  string message = 2;
  optional string transport_data = 3; // JSON string containing transport info
}

// RemoveUserMedia messages
message RemoveUserMediaRequest {
  string room_id = 1;
  string peer_id = 2;
}

message RemoveUserMediaResponse {
  repeated string removed_stream_ids = 1;
}

// CreateTransport messages
message CreateTransportRequest {
  string room_id = 1;
}

message CreateTransportResponse {
  string status = 1;
  optional string transport_data = 2; // JSON string
}

// SaveStream messages
message SaveStreamRequest {
  string room_id = 1;
  Stream stream = 2;
}

message SaveStreamResponse {
  bool success = 1;
  string message = 2;
}

// GetStreamById messages
message GetStreamByIdRequest {
  string stream_id = 1;
}

message GetStreamByIdResponse {
  string status = 1;
  Stream stream = 2;
}

// RemoveStream messages
message RemoveStreamRequest {
  string room_id = 1;
  string stream_id = 2;
}

message RemoveStreamResponse {
  string status = 1;
}

// SaveProducerToStream messages
message SaveProducerToStreamRequest {
  string room_id = 1;
  string producer_id = 2;
  Stream stream = 3;
}

message SaveProducerToStreamResponse {
  string status = 1;
}

// GetStreamByProducer messages
message GetStreamByProducerRequest {
  string producer_id = 1;
}

message GetStreamByProducerResponse {
  string status = 1;
  Stream stream = 2;
}

// RemoveProducer messages
message RemoveProducerRequest {
  string room_id = 1;
  string stream_id = 2;
}

message RemoveProducerResponse {
  string status = 1;
}

// CreateConsumer messages
message CreateConsumerRequest {
  string room_id = 1;
  string stream_id = 2;
  string transport_id = 3;
  string rtp_capabilities = 4; // JSON string
  string participant_data = 5; // JSON string
}

message CreateConsumerResponse {
  string status = 1;
  optional string consumer_data = 2; // JSON string
}

// GetMediaRouter messages
message GetMediaRouterRequest {
  string room_id = 1;
}

message GetMediaRouterResponse {
  string status = 1;
  optional string router_data = 2; // JSON string
}

// ResumeConsumer messages
message ResumeConsumerRequest {
  string room_id = 1;
  string consumer_id = 2;
  string participant_id = 3;
}

message ResumeConsumerResponse {
  string status = 1;
  string message = 2;
}

// UnpublishStream messages
message UnpublishStreamRequest {
  string room_id = 1;
  string stream_id = 2;
  string participant_id = 3;
}

message UnpublishStreamResponse {
  string status = 1;
  string message = 2;
}

// UpdateStream messages
message UpdateStreamRequest {
  string stream_id = 1;
  string participant_id = 2;
  string metadata = 3; // JSON string
  string room_id = 4;
}

message UpdateStreamResponse {
  string status = 1;
  string message = 2;
}

// RemoveParticipantMedia messages
message RemoveParticipantMediaRequest {
  string room_id = 1;
  string participant_id = 2;
}

message RemoveParticipantMediaResponse {
  string status = 1;
  repeated string removed_streams = 2;
}

// CloseMediaRoom messages
message CloseMediaRoomRequest {
  string room_id = 1;
}

message CloseMediaRoomResponse {
  string status = 1;
  string message = 2;
}

// CreateProducer messages
message CreateProducerRequest {
  string room_id = 1;
  string transport_id = 2;
  string kind = 3; // 'audio' or 'video'
  string rtp_parameters = 4; // JSON string
  string participant_data = 5; // JSON string
  string metadata = 6; // JSON string
}

message CreateProducerResponse {
  string status = 1;
  string message = 2;
  optional string producer_data = 3; // JSON string containing producer info
}

// Speaking management messages
message HandleSpeakingRequest {
  string room_id = 1;
  string peer_id = 2;
  optional int32 port = 3; // Optional port for audio service
}

message HandleSpeakingResponse {
  string status = 1;
  string message = 2;
}

message HandleStopSpeakingRequest {
  string room_id = 1;
  string peer_id = 2;
}

message HandleStopSpeakingResponse {
  string status = 1;
  string message = 2;
}

message DestroyTranslationCabinRequest {
  string room_id = 1;
  string source_user_id = 2;
  string target_user_id = 3;
  string source_language = 4;
  string target_language = 5;
}

message DestroyTranslationCabinResponse {
  bool success = 1;
  string message = 2;
}

message ListTranslationCabinRequest {
  string room_id = 1;
  string user_id = 2;
}

message ListTranslationCabinResponse {
  bool success = 1;
  repeated TranslationCabin cabins = 2;
}

message TranslationCabin {
  string target_user_id = 1;
  string source_language = 2;
  string target_language = 3;
}
